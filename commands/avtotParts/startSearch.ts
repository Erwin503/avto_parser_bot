import { Context } from 'telegraf';
import { searchStart } from '../../services/avtotoRequests';
import logger from '../../logger';

export const startSearch = async (ctx: Context, searchCode: string) => {
  try {
    await ctx.reply(`üîç –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª: ${searchCode}...`);

    const startResult = await searchStart(searchCode);
    if (!startResult || !startResult.ProcessSearchId) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ProcessSearchId.');
      return;
    }

    logger.info(`–ü–æ–ª—É—á–µ–Ω ProcessSearchId: ${startResult.ProcessSearchId}`);

    await ctx.reply(`üîÑ –û–∂–∏–¥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ProcessSearchId: ${startResult.ProcessSearchId}...`);
    return startResult.ProcessSearchId;
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞: ${error.message}`);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞.');
    return null;
  }
};
