import { Context, Telegraf } from "telegraf";
import { searchStart, searchGetParts } from "../services/avtotoRequests";
import { createOrder } from "../services/orderService";
import { getUserByTgName } from "../services/userService";
import logger from "../logger";
import { searchInventoryByPartCode } from "../services/excelService";

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const searchResultsCache = new Map<number, any>();
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ Telegram ID
const userCache = new Map<number, any>();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫ inline keyboard
interface InlineButton {
  text: string;
  callback_data: string;
}

export const setupAvtotoPartsCommand = (bot: Telegraf) => {
  // –ö–æ–º–∞–Ω–¥–∞ /avtoto_parts ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å –∞—Ä—Ç–∏–∫—É–ª–∞
  bot.command("avtoto_parts", async (ctx: Context) => {
    try {
      const tgName = ctx.from?.username || ctx.from?.first_name;
      const user = await getUserByTgName(tgName!);
      if (!user) {
        await ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
        return;
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫—ç—à–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
      if (ctx.from?.id) {
        userCache.set(ctx.from.id, user);
      }
      await ctx.reply(
        "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫."
      );
    } catch (error: any) {
      logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /avtoto_parts: ${error.message}`
      );
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –≤–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞
  bot.on("text", async (ctx) => {
    try {
      const searchCode = ctx.message?.text.trim();
      if (!searchCode) {
        await ctx.reply(
          "‚ùå –í—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –∞—Ä—Ç–∏–∫—É–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞."
        );
        return;
      }

      await ctx.reply(`üîç –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª: ${searchCode}...`);

      // –ü–æ–ª—É—á–∞–µ–º process_id —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ searchStart
      const startResult = await searchStart(searchCode);
      if (!startResult || !startResult.ProcessSearchId) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ProcessSearchId.");
        return;
      }
      logger.info(`–ü–æ–ª—É—á–µ–Ω ProcessSearchId: ${startResult.ProcessSearchId}`);

      await ctx.reply(
        `üîÑ –û–∂–∏–¥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ProcessSearchId: ${startResult.ProcessSearchId}...`
      );
      const partsResult = await searchGetParts(startResult.ProcessSearchId);
      if (
        !partsResult ||
        !partsResult.Parts ||
        partsResult.Parts.length === 0
      ) {
        await ctx.reply("‚ùå –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        return;
      }

      logger.debug(`partsResult.Parts[1]: ${JSON.stringify(partsResult.Parts[1])}`)

      const inventoryParts = await searchInventoryByPartCode(searchCode);
      logger.debug(`inventoryParts: ${inventoryParts}`)

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã: —Å–Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ —Å –≤–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞, –∑–∞—Ç–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      const allParts = partsResult.Parts
      // const allParts = [
      //   ...partsResult.Parts,
      //   ...inventoryParts.map((part) => ({
      //     ...part,
      //     Delivery: "0", // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ = 0
      //     price: part.price || 0, // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      //     storage: part.storage || "–ù–µ —É–∫–∞–∑–∞–Ω–æ", // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–∫–ª–∞–¥, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      //   })),
      // ];

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à–µ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (ctx.from?.id) {
        searchResultsCache.set(ctx.from.id, partsResult);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Ü–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
      const manufacturers = new Set(
        partsResult.Parts.map((part: any) => part.Manuf)
      );
      const buttons = Array.from(manufacturers).map((manuf) => {
        const parts = partsResult.Parts.filter(
          (part: any) => part.Manuf === manuf
        );
        const priceRange = `${Math.min(
          ...parts.map((part: any) => part.Price)
        )} - ${Math.max(...parts.map((part: any) => part.Price))}`;
        return {
          text: `${manuf} (${priceRange})`,
          callback_data: `manuf:${manuf}`,
        };
      });

      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:", {
        reply_markup: {
          inline_keyboard: buttons.map((btn) => [btn]),
        },
      });
    } catch (error: any) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞: ${error}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è ‚Äî —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ—Ç–∞–ª–µ–π
  bot.action(/manuf:(.+)/, async (ctx) => {
    try {
      const selectedManuf = ctx.match[1];
      const userId = ctx.from?.id;
      if (!userId) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        return;
      }
      const partsResult = searchResultsCache.get(userId);
      if (!partsResult) {
        await ctx.reply(
          "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫."
        );
        return;
      }
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–æ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      const selectedParts = partsResult.Parts.filter(
        (part: any) => part.Manuf === selectedManuf
      )
        .sort((a: any, b: any) => parseInt(a.Delivery) - parseInt(b.Delivery))
        .slice(0, 5);
      if (selectedParts.length === 0) {
        await ctx.reply("‚ùå –ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        return;
      }
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–µ—Ç–∞–ª–∏
      const detailButtons: InlineButton[] = selectedParts.map(
        (part: any, index: number) => {
          const buttonText = `${part.Name} - ${part.Price} ‚ÇΩ, ${part.Delivery} –¥.`;
          return {
            text: buttonText,
            callback_data: `detail:${selectedManuf}:${index}`,
          };
        }
      );
      await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –¥–ª—è ${selectedManuf}:`, {
        reply_markup: {
          inline_keyboard: detailButtons.map((btn: InlineButton) => [btn]),
        },
      });
      await ctx.answerCbQuery();
    } catch (error: any) {
      logger.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è: ${error.message}`
      );
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ—Ç–∞–ª–∏ ‚Äî –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
  bot.action(/detail:(.+):(.+)/, async (ctx) => {
    try {
      const selectedManuf = ctx.match[1];
      const indexStr = ctx.match[2];
      const index = parseInt(indexStr);
      if (isNaN(index)) {
        await ctx.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ—Ç–∞–ª–∏.");
        return;
      }
      const userId = ctx.from?.id;
      if (!userId) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        return;
      }
      const partsResult = searchResultsCache.get(userId);
      if (!partsResult) {
        await ctx.reply(
          "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫."
        );
        return;
      }
      // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
      const selectedParts = partsResult.Parts.filter(
        (part: any) => part.Manuf === selectedManuf
      )
        .sort((a: any, b: any) => parseInt(a.Delivery) - parseInt(b.Delivery))
        .slice(0, 5);
      if (selectedParts.length <= index) {
        await ctx.reply("‚ùå –î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        return;
      }
      const part = selectedParts[index];
      const messageText = `–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ—Ç–∞–ª—å:\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${part.Name}\n–¶–µ–Ω–∞: ${part.Price} ‚ÇΩ\n–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: ${part.Delivery} –¥–Ω–µ–π\n–°–∫–ª–∞–¥: ${part.Storage}`;
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç–∞–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
      await ctx.reply(messageText, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑",
                callback_data: `create_order:${selectedManuf}:${index}`,
              },
            ],
          ],
        },
      });
      await ctx.answerCbQuery();
    } catch (error: any) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –¥–µ—Ç–∞–ª–∏: ${error.message}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"
  bot.action(/create_order:(.+):(.+)/, async (ctx) => {
    try {
      const selectedManuf = ctx.match[1];
      const indexStr = ctx.match[2];
      const index = parseInt(indexStr);
      if (isNaN(index)) {
        await ctx.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.");
        return;
      }
      const userId = ctx.from?.id;
      if (!userId) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        return;
      }
      const partsResult = searchResultsCache.get(userId);
      if (!partsResult) {
        await ctx.reply(
          "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫."
        );
        return;
      }
      // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
      const selectedParts = partsResult.Parts.filter(
        (part: any) => part.Manuf === selectedManuf
      )
        .sort((a: any, b: any) => parseInt(a.Delivery) - parseInt(b.Delivery))
        .slice(0, 5);
      if (selectedParts.length <= index) {
        await ctx.reply("‚ùå –î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.");
        return;
      }
      const part = selectedParts[index];
      const detailArticule = part.Articule || part.Name;

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
      const user = userCache.get(userId);
      if (!user) {
        await ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
      const orderId = await createOrder(detailArticule, user.id);
      if (orderId) {
        await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ üÜî ${orderId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
      } else {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
      }
      await ctx.answerCbQuery();
    } catch (error: any) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${error.message}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
    }
  });
};
