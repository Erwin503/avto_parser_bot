import { Telegraf, Markup } from "telegraf";
import { getUserByTgName } from "../services/userService";
import { addOrderHistory } from "../services/orderHistoryService";
import db from "../knex";
import logger from "../logger";

export function setupSetStatusCommand(bot: Telegraf) {
    bot.action(/set_status_(\d+)/, async (ctx) => {
        const orderId = Number(ctx.match[1]);
        const tgName = ctx.from.username || ctx.from.first_name;
        const user = await getUserByTgName(tgName);

        if (!user) {
            return ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
        }
        if (user.role !== "admin") {
            return ctx.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤.");
        }

        const order = await db("orders").where("id", orderId).first();
        if (!order) {
            return ctx.reply(`‚ùå –ó–∞–∫–∞–∑ üÜî ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        const allStatuses = ["created", "processing", "complete"];
        const availableStatuses = allStatuses.filter(status => status !== order.status);

        ctx.reply(`‚úè *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ üÜî ${orderId}:*`, {
            ...Markup.inlineKeyboard(
                availableStatuses.map(status => [
                    Markup.button.callback(`üîÑ ${status.charAt(0).toUpperCase() + status.slice(1)}`, `change_status_${orderId}_${status}`)
                ])
            ),
            parse_mode: "Markdown"
        });

        logger.info(`–ê–¥–º–∏–Ω ${tgName} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderId}`);
    });

    bot.action(/change_status_(\d+)_(.+)/, async (ctx) => {
        const orderId = Number(ctx.match[1]);
        const newStatus = ctx.match[2];
        const tgName = ctx.from.username || ctx.from.first_name;
        const user = await getUserByTgName(tgName);

        if (!user) {
            return ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
        }
        if (user.role !== "admin") {
            return ctx.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤.");
        }

        const order = await db("orders").where("id", orderId).first();
        if (!order) {
            return ctx.reply(`‚ùå –ó–∞–∫–∞–∑ üÜî ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        if (!["created", "processing", "complete"].includes(newStatus)) {
            return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å.");
        }

        await db("orders").where("id", orderId).update({ status: newStatus });
        await addOrderHistory(orderId, user.id, `set_status: ${newStatus}`);

        ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ üÜî ${orderId} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: *${newStatus}*`, { parse_mode: "Markdown" });
        logger.info(`–ê–¥–º–∏–Ω ${tgName} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –Ω–∞ ${newStatus}`);
    });
}
