import { Context, Telegraf } from "telegraf";
import { searchStart, searchGetParts } from "../services/avtotoRequests";
import { getUserByTgName } from "../services/userService";
import { searchInventoryByPartCode } from "../services/excelService";
import logger from "../logger";
import { searchResultsCache, userCache } from "./cashes";

export const setupAvtotoPartsCommand = (bot: Telegraf) => {
  // –ö–æ–º–∞–Ω–¥–∞ /avtoto_parts ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å –∞—Ä—Ç–∏–∫—É–ª–∞
  bot.command("avtoto_parts", async (ctx: Context) => {
    try {
      const tgName = ctx.from?.username || ctx.from?.first_name;
      const user = await getUserByTgName(tgName!);
      if (!user) {
        await ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
        return;
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫—ç—à–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
      if (ctx.from?.id) userCache.set(ctx.from.id, user);
      await ctx.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫.");
    } catch (error: any) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /avtoto_parts: ${error.message}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –≤–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞
  bot.on("text", async (ctx) => {
    try {
      const searchCode = ctx.message?.text.trim();
      if (!searchCode) {
        await ctx.reply("‚ùå –í—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ –∞—Ä—Ç–∏–∫—É–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞.");
        return;
      }

      await ctx.reply(`üîç –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª: ${searchCode}...`);

      // –ü–æ–ª—É—á–∞–µ–º process_id —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ searchStart
      const startResult = await searchStart(searchCode);
      if (!startResult || !startResult.ProcessSearchId) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ProcessSearchId.");
        return;
      }
      logger.info(`–ü–æ–ª—É—á–µ–Ω ProcessSearchId: ${startResult.ProcessSearchId}`);
      await ctx.reply(`üîÑ –û–∂–∏–¥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ProcessSearchId: ${startResult.ProcessSearchId}...`);

      const partsResult = await searchGetParts(startResult.ProcessSearchId);
      if (!partsResult || !partsResult.Parts || partsResult.Parts.length === 0) {
        logger.debug("–ó–∞–ø—á–∞—Å—Ç–∏ –ê–≤—Ç–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      }

      const inventoryParts = await searchInventoryByPartCode(searchCode);
      logger.debug(`inventoryParts: ${inventoryParts}`);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã: —Å–Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ —Å –≤–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞, –∑–∞—Ç–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      const allParts = [
        ...partsResult.Parts.map((part: { Delivery: string; Manuf: string; Name: string; Price: number; }) => ({
          Delivery: part.Delivery,
          Manuf: part.Manuf,
          Name: part.Name,
          Price: part.Price,
        })),
        ...inventoryParts.map((part) => ({
          ...part,
          Delivery: "0", // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ = 0
        })),
      ];

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à–µ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (ctx.from?.id) {
        searchResultsCache.set(ctx.from.id, allParts);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Ü–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
      const manufacturers = new Set(allParts.map((part: any) => part.Manuf));
      const buttons = Array.from(manufacturers).map((manuf) => {
        const parts = allParts.filter((part: any) => part.Manuf === manuf);
        const priceRange = `${Math.min(...parts.map((part: any) => part.Price))} - ${Math.max(...parts.map((part: any) => part.Price))}`;
        return {
          text: `${manuf} (${priceRange})`,
          callback_data: `manuf:${manuf}`,
        };
      });
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:", {
        reply_markup: { inline_keyboard: buttons.map((btn) => [btn]) },
      });
    } catch (error: any) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞: ${error}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞.");
    }
  });
};
