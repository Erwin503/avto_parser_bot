import { Telegraf, Context } from "telegraf";
import { createOrder } from "../services/orderService";
import logger from "../logger";
import { userCache, selectedDetailCache } from "./cashes";

export const setupOrderCreation = (bot: Telegraf) => {
  bot.action(/create_order:(.+):(.+)/, async (ctx: Context) => {
    try {
      const userId = ctx.from?.id;
      if (!userId) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        return;
      }
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–∞–Ω–µ–µ –¥–µ—Ç–∞–ª—å –∏–∑ –∫—ç—à–∞
      const selectedPart = selectedDetailCache.get(userId);
      if (!selectedPart) {
        await ctx.reply("‚ùå –î–µ—Ç–∞–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        return;
      }
      const detailArticule = selectedPart.Articule || selectedPart.Name;
      const user = userCache.get(userId);
      if (!user) {
        await ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
        return;
      }
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
      const orderId = await createOrder(detailArticule, user.id);
      if (orderId) {
        await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ üÜî ${orderId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
      } else {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
      }
      await ctx.answerCbQuery();
    } catch (error: any) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${error.message}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
    }
  });
};
