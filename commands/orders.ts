import { Telegraf, Markup } from "telegraf";
import { getUserByTgName } from "../services/userService";
import { getOrdersByClientId, getAllOrders } from "../services/orderService";
import db from "../knex";
import logger from "../logger";

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
function buildOrdersKeyboard(orders: any[], page: number) {
  const ordersPerPage = 5;
  const totalPages = Math.ceil(orders.length / ordersPerPage);

  // –û—Ç–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã ‚Äì –ø–µ—Ä–≤—ã–º–∏)
  const startIndex = (page - 1) * ordersPerPage;
  const pageOrders = orders.slice(startIndex, startIndex + ordersPerPage);

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const orderButtons = pageOrders.map(order =>
    Markup.button.callback(
      `üÜî ${order.id} | üîß ${order.detail_articule} | üìç ${order.status}`,
      `order_${order.id}`
    )
  );

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  const paginationButtons = [];
  if (page > 1) {
    paginationButtons.push(
      Markup.button.callback("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", `orders_page:${page - 1}`)
    );
  }
  if (page < totalPages) {
    paginationButtons.push(
      Markup.button.callback("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", `orders_page:${page + 1}`)
    );
  }

  // –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –∑–∞–∫–∞–∑—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –∏, –µ—Å–ª–∏ –µ—Å—Ç—å, —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const inlineKeyboard = orderButtons.map(btn => [btn]);
  if (paginationButtons.length > 0) {
    inlineKeyboard.push(paginationButtons);
  }
  return Markup.inlineKeyboard(inlineKeyboard);
}

export function setupOrdersCommand(bot: Telegraf) {
  // –ö–æ–º–∞–Ω–¥–∞ /orders ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  bot.command("orders", async (ctx) => {
    try {
      const tgName = ctx.from?.username || ctx.from?.first_name;
      const user = await getUserByTgName(tgName!);

      if (!user) {
        return ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
      }

      let orders;
      if (user.role === "client") {
        orders = await getOrdersByClientId(user.id);
      } else {
        orders = await getAllOrders();
      }

      if (orders.length === 0) {
        return ctx.reply("üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.");
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é id (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã ‚Äì –ø–µ—Ä–≤—ã–º–∏)
      orders.sort((a, b) => b.id - a.id);

      const page = 1;
      const keyboard = buildOrdersKeyboard(orders, page);
      await ctx.reply("üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*", {
        ...keyboard,
        parse_mode: "Markdown"
      });
      logger.info(`${tgName} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤`);
    } catch (error: any) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–∫–∞–∑–æ–≤: ${error.message}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ‚Äì –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  bot.action(/orders_page:(\d+)/, async (ctx) => {
    try {
      const page = Number(ctx.match[1]);
      if (isNaN(page)) return;

      const tgName = ctx.from?.username || ctx.from?.first_name;
      const user = await getUserByTgName(tgName!);
      if (!user) {
        return ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
      }
      let orders;
      if (user.role === "client") {
        orders = await getOrdersByClientId(user.id);
      } else {
        orders = await getAllOrders();
      }
      if (orders.length === 0) {
        return ctx.reply("üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.");
      }
      orders.sort((a, b) => b.id - a.id);
      const keyboard = buildOrdersKeyboard(orders, page);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏, –∑–∞–º–µ–Ω—è—è –∏–Ω–ª–∞–π–Ω‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      await ctx.editMessageReplyMarkup(keyboard.reply_markup);
    } catch (error: any) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: ${error.message}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ ‚Äî –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
  bot.action(/order_(\d+)/, async (ctx) => {
    try {
      // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ)
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
      
      const orderId = Number(ctx.match[1]);
      const tgName = ctx.from?.username || ctx.from?.first_name;
      const user = await getUserByTgName(tgName!);
      if (!user) {
        return ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
      }
      const order = await db("orders").where("id", orderId).first();
      if (!order) {
        return ctx.reply(`‚ùå –ó–∞–∫–∞–∑ üÜî ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
      const orderButtons = [
        Markup.button.callback("üìú –ò—Å—Ç–æ—Ä–∏—è", `history_${orderId}`)
      ];
      if (user.role === "admin") {
        orderButtons.push(Markup.button.callback("‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", `set_status_${orderId}`));
      }
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      const backButton = Markup.button.callback("üîô –ù–∞–∑–∞–¥", "orders_back");

      await ctx.reply(`üÜî *–ó–∞–∫–∞–∑ ${orderId}*`, {
        reply_markup: Markup.inlineKeyboard([
          orderButtons,
          [backButton]
        ]).reply_markup,
        parse_mode: "Markdown"
      });
      
    } catch (error: any) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–∫–∞–∑–∞: ${error.message}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
  bot.action("orders_back", async (ctx) => {
    try {
      // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
      
      const tgName = ctx.from?.username || ctx.from?.first_name;
      const user = await getUserByTgName(tgName!);
      if (!user) {
        return ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
      }
      
      let orders;
      if (user.role === "client") {
        orders = await getOrdersByClientId(user.id);
      } else {
        orders = await getAllOrders();
      }
      if (orders.length === 0) {
        return ctx.reply("üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.");
      }
      orders.sort((a, b) => b.id - a.id);
      const page = 1;
      const keyboard = buildOrdersKeyboard(orders, page);
      await ctx.editMessageText("üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*", {
        reply_markup: keyboard.reply_markup,
        parse_mode: "Markdown"
      });
    } catch (error: any) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤: ${error.message}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.");
    }
  });
}
