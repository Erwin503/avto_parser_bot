import { Telegraf } from "telegraf";
import { getUserByTgName } from "../../services/userService";
import { getArticleFromChatGPT } from "../../services/chatgptApi";
import { createOrder } from "../../services/orderService";
import logger from "../../logger";

export function setupCreateOrderCommand(bot: Telegraf) {
  const orderCreationState = new Map<
    number,
    { userId: number; description?: string; retries: number }
  >();

  bot.command("create_order", async (ctx) => {
    const tgName = ctx.from.username || ctx.from.first_name;
    const user = await getUserByTgName(tgName);

    if (!user) {
      await ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
      return;
    }

    orderCreationState.set(ctx.from.id, { userId: user.id, retries: 0 });
    await ctx.reply("üìù –û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:");
  });

  bot.on("text", async (ctx) => {
    try {
      const state = orderCreationState.get(ctx.from.id);
      if (!state) return;

      if (!state.description) {
        state.description = ctx.message.text;
        await ctx.reply("üîç –û–ø—Ä–µ–¥–µ–ª—è—é –∞—Ä—Ç–∏–∫—É–ª –¥–µ—Ç–∞–ª–∏...");

        // const article = await getArticleFromChatGPT(state.description);
        const article = state.description;

        if (!article) {
          state.retries++;

          if (state.retries >= 2) {
            await ctx.reply(
              "‚ùå –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å –ø–æ-–¥—Ä—É–≥–æ–º—É."
            );
            orderCreationState.delete(ctx.from.id);
            return;
          }

          await ctx.reply(
            "‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –£—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞."
          );
          return;
        }

        // –ï—Å–ª–∏ OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω...")
        if (article.startsWith("‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")) {
          await ctx.reply(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É OpenAI"
          );
          orderCreationState.delete(ctx.from.id);
          return;
        }

        const orderId = await createOrder(article, state.userId);
        if (!orderId) {
          await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
          orderCreationState.delete(ctx.from.id);
          return;
        }

        await ctx.reply(
          `‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\nüÜî ID: ${orderId}\nüîß –ê—Ä—Ç–∏–∫—É–ª: ${article}`
        );
        orderCreationState.delete(ctx.from.id);
        return;
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  });
}
