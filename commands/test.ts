import { Context, Telegraf } from 'telegraf';
import { searchStart, searchGetParts } from '../services/avtotoRequests'; // –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
import { searchInventoryByPartCode } from '../services/excelService'; // –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
import logger from '../logger';

export const setupAvtotoPartsCommand = (bot: Telegraf) => {
  bot.command("avtoto_parts", async (ctx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª
      const messageText = ctx.message?.text;
      if (!messageText) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.");
        return;
      }

      const args = messageText.split(" ");
      if (args.length < 2) {
        await ctx.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /avtoto_parts <–∞—Ä—Ç–∏–∫—É–ª>");
        return;
      }

      const searchCode = args[1].trim(); // –∞—Ä—Ç–∏–∫—É–ª

      await ctx.reply(`üîç –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª: ${searchCode}...`);

      // –ü–æ–ª—É—á–∞–µ–º process_id —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ SearchStart
      const startResult = await searchStart(searchCode);
      if (!startResult || !startResult.process_id) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ process_id.");
        return;
      }

      logger.info(`–ü–æ–ª—É—á–µ–Ω process_id: ${startResult.process_id}`);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É SearchGetParts
      await ctx.reply(`üîÑ –û–∂–∏–¥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è process_id: ${startResult.process_id}...`);

      const partsResult = await searchGetParts(startResult.process_id);

      if (!partsResult || !partsResult.Parts || partsResult.Parts.length === 0) {
        await ctx.reply("‚ùå –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        return;
      }

      // –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º searchInventoryByPartCode –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
      const inventoryParts = await searchInventoryByPartCode(searchCode);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã: —Å–Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ —Å –≤–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞, –∑–∞—Ç–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      const allParts = [...partsResult.Parts, ...inventoryParts.map(part => ({
        ...part,
        Delivery: '0', // –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ = 0
        price: part.price || 0, // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        storage: part.storage || '–ù–µ —É–∫–∞–∑–∞–Ω–æ', // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–∫–ª–∞–¥, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      }))];

      // –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
      ctx.session.parts = allParts;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Ü–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
      let manufacturers = new Set(allParts.map((part: any) => part.Manuf)); // —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏
      let buttons = Array.from(manufacturers).map((manuf) => {
        const parts = allParts.filter((part: any) => part.Manuf === manuf);
        const priceRange = `${Math.min(...parts.map((part: any) => part.price))} - ${Math.max(...parts.map((part: any) => part.price))}`;
        return { text: `${manuf} (${priceRange})`, callback_data: `manuf:${manuf}` };
      });

      await ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:",
        {
          reply_markup: {
            inline_keyboard: buttons.map((btn) => [btn]),
          },
        }
      );
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
  bot.on("callback_query", async (ctx: Context) => {
    const callbackQuery = ctx.callbackQuery;
    if (!callbackQuery || !callbackQuery.data) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤—ã–±–æ—Ä.");
      return;
    }

    const selectedManuf = callbackQuery.data.split(":")[1];
    const searchCode = callbackQuery.message?.text.match(/–∞—Ä—Ç–∏–∫—É–ª: (\S+)/)?.[1]; // –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    if (!searchCode) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª.");
      return;
    }

    await ctx.answerCbQuery();
    await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${selectedManuf}, –ø—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–∏—Å–∫...`);

    const startResult = await searchStart(searchCode);
    const partsResult = await searchGetParts(startResult.process_id);

    if (!partsResult || !partsResult.Parts || partsResult.Parts.length === 0) {
      await ctx.reply("‚ùå –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return;
    }

    const selectedParts = partsResult.Parts.filter((part: any) => part.Manuf === selectedManuf)
      .sort((a: any, b: any) => parseInt(a.Delivery) - parseInt(b.Delivery))
      .slice(0, 5);

    const detailsMessage = selectedParts.map((part: any) => 
      `${part.Name} - ${part.price} ‚ÇΩ, ${part.Delivery} –¥–Ω–µ–π, –°–∫–ª–∞–¥: ${part.storage}`).join("\n");

    await ctx.reply(`üîç –ù–∞–π–¥–µ–Ω–æ 5 –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è ${selectedManuf}:\n${detailsMessage}`);
  });
};
