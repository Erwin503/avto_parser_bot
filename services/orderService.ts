import db from "../knex";
import logger from "../logger";

export async function getOrdersByClientId(clientId: number) {
    try {
        const orders = await db("orders").where("client_id", clientId);
        return orders;
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}: ${error}`);
        return [];
    }
}

export async function getAllOrders() {
    try {
        const orders = await db("orders")
            .join("users as clients", "orders.client_id", "clients.id")
            .leftJoin("users as admins", "orders.responsible_id", "admins.id")
            .select(
                "orders.id",
                "orders.detail_articule",
                "orders.status",
                "clients.tg_name as client",
                "admins.tg_name as responsible"
            );

        return orders;
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤: ${error}`);
        return [];
    }
}

export async function createOrder(
    detailArticule: string,
    clientId: number,
    responsibleId?: number
) {
    try {
        const [id] = await db("orders").insert({
            status: "created",
            detail_articule: detailArticule,
            client_id: clientId,
            responsible_id: responsibleId || null
        });
        logger.info(`–ó–∞–∫–∞–∑ üÜî ${id} —Å–æ–∑–¥–∞–Ω. –ö–ª–∏–µ–Ω—Ç ID: ${clientId}, –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${responsibleId || "‚ùå –ù–µ—Ç"}`);
        return id;
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${error}`);
        return null;
    }
}


