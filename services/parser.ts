import * as puppeteer from "puppeteer";
import logger from "../logger";

async function scrapeTable(page: puppeteer.Page) {
    return await page.evaluate(() => {
        const rows = Array.from(document.querySelectorAll("table.globalResult.searchResultsSecondStep tbody tr"));
        return rows
            .map(row => {
                const cols = row.querySelectorAll("td");
                return {
                    brand: cols[2]?.innerText.trim(),
                    availability: cols[3]?.innerText.trim(),
                    partType: cols[4]?.innerText.trim(),
                    quantity: cols[5]?.innerText.trim(),
                    deliveryTime: cols[7]?.innerText.trim(),
                    price: cols[8]?.innerText.trim()
                };
            })
            .filter(item => item.brand && item.price); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –±—Ä–µ–Ω–¥–æ–º –∏ —Ü–µ–Ω–æ–π
    });
}

export async function parseZap82(partNumber: string) {
    let url = `https://zap82.ru/search?pcode=${partNumber}`;
    logger.info(`üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è: ${url}`);

    try {
        const browser = await puppeteer.launch({ headless: true });
        const page = await browser.newPage();
        await page.goto(url, { waitUntil: "domcontentloaded" });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–µ–Ω–¥–∞
        const brandElement = await page.$("a.brandInfoLink");
        let brandName = null;

        if (brandElement) {
            brandName = await page.evaluate((el: { innerText: string; }) => el.innerText.trim(), brandElement);
            logger.info(`üìå –ù–∞–π–¥–µ–Ω –±—Ä–µ–Ω–¥: ${brandName}`);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±—Ä–µ–Ω–¥—É
            const encodedBrand = encodeURIComponent(brandName);
            url = `https://zap82.ru/search/${encodedBrand}/${partNumber}`;
            logger.info(`üîç –ù–æ–≤—ã–π URL –¥–ª—è –ø–æ–∏—Å–∫–∞: ${url}`);

            await page.goto(url, { waitUntil: "domcontentloaded" });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        const hasResults = await page.$("table.globalResult.searchResultsSecondStep");

        if (!hasResults) {
            logger.warn(`‚ùå –ü–∞—Ä—Å–µ—Ä: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ${partNumber}`);
            await browser.close();
            return null;
        }

        // –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É
        const results = await scrapeTable(page);
        await browser.close();

        return { partNumber, brandName, url, results };
    } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${url}: ${error}`);
        return null;
    }
}
