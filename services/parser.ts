import puppeteer from "puppeteer";
import logger from "../logger";
import { parsePriceTable } from "./parsePriceTable";

export async function parseZap82(partNumber: string) {
  const baseUrl = `https://zap82.ru/search?pcode=${partNumber}`;
  logger.info(`üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è: ${baseUrl}`);

  try {
    const browser = await puppeteer.launch({
      executablePath: "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
      headless: false
    });
    const page = await browser.newPage();
    await page.setUserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36");
    await page.goto(baseUrl, { waitUntil: "domcontentloaded" });

    // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ globalCase —Å —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const tableElement = await page.$("table.globalCase");
    if (!tableElement) {
      logger.warn(`‚ùå –¢–∞–±–ª–∏—Ü–∞ globalCase –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ ${partNumber}`);
      await browser.close();
      return null;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ "–ü–æ–∏—Å–∫"
    const links: string[] = await page.evaluate(() => {
      return Array.from(document.querySelectorAll("table.globalCase tbody tr"))
        .map(row => {
          const linkElement = row.querySelector("td.caseUrl a.startSearching");
          return linkElement ? `https://zap82.ru${linkElement.getAttribute("href")}` : null;
        })
        .filter(link => link !== null) as string[];
    });

    // –î–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å—Ä–æ–∫–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    const detailsArray = await Promise.all(
      links.map(async (link) => {
        try {
          await page.goto(link, { waitUntil: "domcontentloaded" });
          // –ï—Å–ª–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–æ–±–æ—Ç–æ–≤, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          const details = await parsePriceTable(page);
          return details;
        } catch (error) {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Å—ã–ª–∫–∏ ${link}: ${error}`);
          return [];
        }
      })
    );

    await browser.close();
    return { partNumber, links, details: detailsArray };
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${baseUrl}: ${error}`);
    return null;
  }
}
