import axios from "axios";
import dotenv from "dotenv";
import logger from "../logger";
import { SocksProxyAgent } from "socks-proxy-agent";

dotenv.config();

const PROXY_URL = process.env.PROXY_URL;

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

const agent = PROXY_URL ? new SocksProxyAgent(PROXY_URL) : undefined;

export async function getArticleFromChatGPT(description: string): Promise<string | null> {
    if (!OPENAI_API_KEY) {
        logger.error("‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á OpenAI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
        return null;
    }

    try {
        const response = await axios.post(
            "https://api.openai.com/v1/chat/completions",
            {
                model: "gpt-3.5-turbo", // –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ GPT-4, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
                messages: [
                    { 
                        role: "system", 
                        content: `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç—è–º. 
                        –ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **—Ç–æ–ª—å–∫–æ –≤—ã–¥–∞–π —Ç–æ—á–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª** –¥–µ—Ç–∞–ª–∏. 
                        **–ù–∏–∫–∞–∫–æ–≥–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Å–ª–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª.**
                        –ß—Ç–æ–±—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏ —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –∑–∞–ø—á–∞—Å—Ç–∏, —Å–ª–µ–¥—É–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –±–∞–∑–∞–º–∏. –û–Ω–∏ –µ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É –ª—é–±–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –≤–∏–Ω-–∫–æ–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã, –∞ —Ç–∞–∫–∂–µ –≥–æ–¥ –µ–µ –≤—ã–ø—É—Å–∫–∞
                       `
                    },
                    { role: "user", content: `–û–ø—Ä–µ–¥–µ–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –¥–µ—Ç–∞–ª–∏: "${description}"` }
                ],
                max_tokens: 20
            },
            {
                headers: {
                    "Authorization": `Bearer ${OPENAI_API_KEY}`,
                    "Content-Type": "application/json"
                },
                httpsAgent: agent
            }
        );

        const chatResponse = response.data.choices[0].message.content.trim();
        logger.info(`üîç ChatGPT –æ—Ç–≤–µ—Ç–∏–ª: ${chatResponse}`);

        if (chatResponse.toLowerCase().includes("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")) {
            logger.warn(`‚ö† ChatGPT –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª.`);
            return null;
        }

        return chatResponse;
    } catch (error: any) {
        if (error.response?.status === 403 && error.response?.data?.error?.code === "unsupported_country_region_territory") {
            logger.error("‚ùå OpenAI API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API.");
            return "‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å VPN –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.";
        }

        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT: ${error.response?.status} - ${JSON.stringify(error.response?.data)}`);
        return null;
    }
}
