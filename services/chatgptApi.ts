import axios from "axios";
import dotenv from "dotenv";
import logger from "../logger";
import { SocksProxyAgent } from "socks-proxy-agent";

dotenv.config();

const PROXY_URL = process.env.PROXY_URL;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const agent = PROXY_URL ? new SocksProxyAgent(PROXY_URL) : undefined;

export interface ChatGPTInput {
  model: string;
  year: string;
  description: string;
}

export async function getArticleFromChatGPT(input: ChatGPTInput): Promise<string | null> {
  if (!OPENAI_API_KEY) {
    logger.error("‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á OpenAI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
    return null;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—ä–µ–¥–∏–Ω—è—è –º–æ–¥–µ–ª—å, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏
  const userContent = `–û–ø—Ä–µ–¥–µ–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –¥–µ—Ç–∞–ª–∏. –ú–æ–¥–µ–ª—å: "${input.model}", –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: "${input.year}", –û–ø–∏—Å–∞–Ω–∏–µ: "${input.description}"`;

  try {
    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-3.5-turbo", // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ GPT-4, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
        messages: [
          {
            role: "system",
            content: `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç—è–º. –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–¥–∞–π **—Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª** –¥–µ—Ç–∞–ª–∏.
–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª.`
          },
          { role: "user", content: userContent }
        ],
        max_tokens: 20
      },
      {
        headers: {
          "Authorization": `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json"
        },
        httpsAgent: agent
      }
    );

    const chatResponse = response.data.choices[0].message.content.trim();
    logger.info(`üîç ChatGPT –æ—Ç–≤–µ—Ç–∏–ª: ${chatResponse}`);

    if (chatResponse.toLowerCase().includes("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")) {
      logger.warn(`‚ö† ChatGPT –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª.`);
      return null;
    }

    return chatResponse;
  } catch (error: any) {
    if (error.response?.status === 403 && error.response?.data?.error?.code === "unsupported_country_region_territory") {
      logger.error("‚ùå OpenAI API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API.");
      return "‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å VPN –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.";
    }
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT: ${error.response?.status} - ${JSON.stringify(error.response?.data)}`);
    return null;
  }
}
